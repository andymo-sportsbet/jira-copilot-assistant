#!/usr/bin/env bash

# jira-close.sh
# Close JIRA tickets with completion summary
# Part of: Copilot-Powered JIRA Assistant (Spec 008)

set -euo pipefail

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Load libraries
# shellcheck disable=SC1091
source "${SCRIPT_DIR}/lib/utils.sh"
# shellcheck disable=SC1091
source "${SCRIPT_DIR}/lib/jira-api.sh"

# Load environment
load_env "${SCRIPT_DIR}/../.env"

# Show help
show_help() {
    cat << EOF
Usage: $(basename "$0") <TICKET-KEY>

Close a JIRA ticket by adding a completion summary and transitioning to Done.

Arguments:
  TICKET-KEY          JIRA ticket key (e.g., PROJ-123)
  --help, -h         Show this help message

Examples:
  $(basename "$0") PROJ-123
  $(basename "$0") MYAPP-456

What this does:
  1. Fetches ticket details from JIRA
  2. Generates a completion summary based on description and AC
  3. Adds the summary as a comment
  4. Transitions the ticket to "Done" status

Environment Variables:
  JIRA_BASE_URL      Your JIRA instance URL
  JIRA_TOKEN        JIRA API token
  JIRA_PROJECT      JIRA project key

EOF
}

# Generate completion summary
generate_summary() {
    local ticket_data="$1"
    local summary=$(echo "$ticket_data" | jq -r '.fields.summary')
    
    # Simple template-based summary
    cat << EOF
âœ… Ticket Completed

*Summary:* ${summary}

*Status:* This ticket has been completed and is ready for review.

_This comment was automatically generated by the JIRA Copilot Assistant._
EOF
}

# Main function
main() {
    # Check dependencies
    check_dependencies || exit 1
    
    # Check for help flag
    if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
        show_help
        exit 0
    fi
    
    # Get ticket key from first argument
    local ticket_key="${1:-}"
    
    if [[ -z "$ticket_key" ]]; then
        error "Missing required argument: TICKET-KEY"
        echo ""
        show_help
        exit 1
    fi
    
    # Validate ticket key format
    validate_ticket_key "$ticket_key" || exit 1
    
    info "Fetching ticket details for $ticket_key..."
    
    # Fetch ticket details
    local ticket_data
    if ! ticket_data=$(jira_get_issue "$ticket_key"); then
        error "Failed to fetch ticket $ticket_key"
        exit 1
    fi
    
    # Check current status
    local current_status=$(echo "$ticket_data" | jq -r '.fields.status.name')
    local status_lower=$(echo "$current_status" | tr '[:upper:]' '[:lower:]')
    info "Current status: $current_status"
    
    if [[ "$status_lower" == "done" ]]; then
        warning "Ticket $ticket_key is already closed (status: Done)"
        info "Nothing to do."
        exit 0
    fi
    
    # Generate completion summary
    debug "Generating completion summary..."
    local summary=$(generate_summary "$ticket_data")
    
    # Add comment with summary
    info "Adding completion summary..."
    if ! jira_add_comment "$ticket_key" "$summary" > /dev/null; then
        error "Failed to add comment"
        exit 1
    fi
    
    # Transition to Done
    info "Transitioning to Done status..."
    if ! jira_transition "$ticket_key" "Done" > /dev/null; then
        warning "Failed to transition to Done. The ticket might not have a 'Done' transition available."
        warning "Comment has been added, but status unchanged."
        exit 1
    fi
    
    local ticket_url=$(get_issue_url "$ticket_key")
    
    # Success output
    echo ""
    success "Closed: $ticket_key"
    success "Status: Done"
    echo -e "${BLUE}ðŸ”— $ticket_url${NC}"
    echo ""
}

# Run main function
main "$@"
