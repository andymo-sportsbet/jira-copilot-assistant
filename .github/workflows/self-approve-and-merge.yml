name: Self-approve and (optionally) merge

on:
  # The workflow supports two safe entry points:
  # 1) pull_request_target for PR open/update events (runs in base repo context so secrets are available)
  #    â€” used to auto-approve+merge when the PR author is the repository owner.
  # 2) issue_comment created on a PR by the repository owner using the exact commands
  #    (/self-approve or /self-approve-and-merge). We validate the commenter is the repo owner
  #    before taking any action.
  pull_request_target:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]
  # Allow manual runs for testing/maintenance
  workflow_dispatch: {}

jobs:
  self-approve:
    # Job always runs for configured events; the Validate step decides whether to act
    runs-on: ubuntu-latest
    steps:
      - name: Validate trigger, ensure owner and command (if comment)
        id: validate
        run: |
          set -euo pipefail
          EVENT_NAME='${{ github.event_name }}'
          REPO_OWNER='${{ github.repository_owner }}'
          echo "Triggered by event: ${EVENT_NAME}; repo owner: ${REPO_OWNER}"

          PR_NUMBER=''
          MERGE='no'
          PROCEED='no'

          if [ "${EVENT_NAME}" = "pull_request_target" ]; then
            PR_NUMBER='${{ github.event.pull_request.number }}'
            PR_AUTHOR='${{ github.event.pull_request.user.login }}'
            echo "PR author: ${PR_AUTHOR}"
            if [ "${PR_AUTHOR}" != "${REPO_OWNER}" ]; then
              echo "PR author is not the repository owner; skipping auto-approve." >&2
              exit 78
            fi
            # Owner-created PR â€” approve and merge
            MERGE='yes'
            PROCEED='yes'

          elif [ "${EVENT_NAME}" = "issue_comment" ]; then
            # Ensure the comment was created on a PR (issue.pull_request exists)
            IS_PR='${{ toJson(github.event.issue.pull_request) }}'
            if [ "${IS_PR}" = "null" ] || [ -z "${IS_PR}" ]; then
              echo "Comment is not on a PR; skipping." >&2
              exit 78
            fi
            COMMENT_AUTHOR='${{ github.event.comment.user.login }}'
            COMMENT_BODY='${{ github.event.comment.body }}'
            echo "Comment author: ${COMMENT_AUTHOR}"
            if [ "${COMMENT_AUTHOR}" != "${REPO_OWNER}" ]; then
              echo "Commenter is not the repository owner; skipping." >&2
              exit 78
            fi
            # Only accept explicit owner commands
            if echo "${COMMENT_BODY}" | grep -Eq '^/self-approve-and-merge\b'; then
              PR_NUMBER='${{ github.event.issue.number }}'
              MERGE='yes'
              PROCEED='yes'
            elif echo "${COMMENT_BODY}" | grep -Eq '^/self-approve\b'; then
              PR_NUMBER='${{ github.event.issue.number }}'
              MERGE='no'
              PROCEED='yes'
            else
              echo "Owner comment did not contain an approve command; skipping." >&2
              exit 78
            fi
          else
            echo "Unsupported event ${EVENT_NAME}; skipping." >&2
            exit 78
          fi

          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "merge=${MERGE}" >> $GITHUB_OUTPUT
          echo "proceed=${PROCEED}" >> $GITHUB_OUTPUT

      - name: Approve PR via API (as bot)
        if: ${{ steps.validate.outputs.proceed == 'yes' }}
        env:
          TOKEN: ${{ secrets.BOT_SELF_APPROVE_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ steps.validate.outputs.pr_number }}
        run: |
          if [ -z "$TOKEN" ]; then
            echo "ðŸ”’ BOT_SELF_APPROVE_TOKEN repository secret not set or unavailable in this event context. Skipping approval." >&2
            echo "Ensure a repo secret named 'BOT_SELF_APPROVE_TOKEN' exists (Settings â†’ Secrets & variables â†’ Actions) or run via pull_request_target context." >&2
            # Exit with 78 to indicate neutral/skip rather than a hard failure
            exit 78
          fi
          echo "Posting approval for PR #${PR_NUMBER} as ${OWNER}"
          # Retry up to 3 times if the API call fails; log response body and HTTP code for debugging
          n=0
          code=0
          until [ "$n" -ge 3 ]; do
            resp=$(curl -s -w "\n%{http_code}" -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -X POST "https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/reviews" \
              -d '{"body":"Automated code-owner approval","event":"APPROVE"}') || true
            code=$(echo "$resp" | tail -n1)
            body=$(echo "$resp" | sed '$d')
            echo "HTTP code: ${code}"
            echo "Response body: ${body}"
            if [ "${code}" = "200" ] || [ "${code}" = "201" ]; then
              echo "Approval posted successfully"
              break
            fi
            n=$((n+1))
            echo "Approval attempt ${n} failed (code ${code}). Retrying in 2s..."
            sleep 2
          done
          if [ "$n" -ge 3 ] && [ "${code}" != "200" ] && [ "${code}" != "201" ]; then
            echo "Failed to post approval after retries (last http code ${code})" >&2
            exit 1
          fi

      - name: Merge PR via API (optional)
        if: ${{ steps.validate.outputs.merge == 'yes' }}
        env:
          TOKEN: ${{ secrets.BOT_SELF_APPROVE_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ steps.validate.outputs.pr_number }}
        run: |
          echo "Merging PR #${PR_NUMBER}"
          if [ -z "$TOKEN" ]; then
            echo "ðŸ”’ BOT_SELF_APPROVE_TOKEN repository secret not set or unavailable in this event context. Skipping merge." >&2
            echo "Ensure a repo secret named 'BOT_SELF_APPROVE_TOKEN' exists (Settings â†’ Secrets & variables â†’ Actions) or run via pull_request_target context." >&2
            exit 78
          fi
          # Retry merge up to 3 times and log response for debugging
          m=0
          mcode=0
          until [ "$m" -ge 3 ]; do
            mresp=$(curl -s -w "\n%{http_code}" -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -X PUT "https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/merge" \
              -d '{"merge_method":"merge"}') || true
            mcode=$(echo "$mresp" | tail -n1)
            mbody=$(echo "$mresp" | sed '$d')
            echo "Merge HTTP code: ${mcode}"
            echo "Merge response body: ${mbody}"
            if [ "${mcode}" = "200" ] || [ "${mcode}" = "201" ]; then
              echo "Merge succeeded"
              break
            fi
            m=$((m+1))
            echo "Merge attempt ${m} failed (code ${mcode}). Retrying in 2s..."
            sleep 2
          done
          if [ "$m" -ge 3 ] && [ "${mcode}" != "200" ] && [ "${mcode}" != "201" ]; then
            echo "Failed to merge PR after retries (last http code ${mcode})" >&2
            exit 1
          fi
