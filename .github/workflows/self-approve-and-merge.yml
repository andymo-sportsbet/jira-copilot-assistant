name: Self-approve and (optionally) merge

on:
  issue_comment:
    types: [created]

jobs:
  self-approve:
    # only run for pull request comments
    if: github.event.issue.pull_request != null
    runs-on: ubuntu-latest
    steps:
      - name: Capture commenter and body
        id: captures
        run: |
          echo "commenter=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT
          # single-line body capture
          BODY=$(echo "${{ github.event.comment.body }}" | tr -d '\r')
          echo "body=${BODY}" >> $GITHUB_OUTPUT

      - name: Validate command and commenter
        id: validate
        run: |
          # We expect the PR author to comment with the command. The bot will act using its token.
          PR_AUTHOR="${{ github.event.issue.user.login }}"
          COMMENTER="${{ steps.captures.outputs.commenter }}"
          if [ "$COMMENTER" != "$PR_AUTHOR" ]; then
            echo "Commenter ($COMMENTER) is not the PR author ($PR_AUTHOR); ignoring." >&2
            exit 78
          fi
          case "${{ steps.captures.outputs.body }}" in
            "/self-approve") echo "merge=no" >> $GITHUB_OUTPUT ;;
            "/self-approve-and-merge") echo "merge=yes" >> $GITHUB_OUTPUT ;;
            *) echo "No valid command in comment; exiting" >&2 ; exit 78 ;;
          esac

      - name: Approve PR via API (as bot)
        if: always()
        env:
          TOKEN: ${{ secrets.BOT_SELF_APPROVE_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          if [ -z "$TOKEN" ]; then
            echo "SELF_APPROVE_TOKEN secret not set" >&2
            exit 1
          fi
          echo "Posting approval for PR #${PR_NUMBER} as ${OWNER}"
          # Retry up to 3 times if the API call fails; log response body and HTTP code for debugging
          n=0
          code=0
          until [ "$n" -ge 3 ]; do
            resp=$(curl -s -w "\n%{http_code}" -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -X POST "https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/reviews" \
              -d '{"body":"Automated code-owner approval","event":"APPROVE"}') || true
            code=$(echo "$resp" | tail -n1)
            body=$(echo "$resp" | sed '$d')
            echo "HTTP code: ${code}"
            echo "Response body: ${body}"
            if [ "${code}" = "200" ] || [ "${code}" = "201" ]; then
              echo "Approval posted successfully"
              break
            fi
            n=$((n+1))
            echo "Approval attempt ${n} failed (code ${code}). Retrying in 2s..."
            sleep 2
          done
          if [ "$n" -ge 3 ] && [ "${code}" != "200" ] && [ "${code}" != "201" ]; then
            echo "Failed to post approval after retries (last http code ${code})" >&2
            exit 1
          fi

      - name: Merge PR via API (optional)
        if: ${{ steps.validate.outputs.merge == 'yes' }}
        env:
          TOKEN: ${{ secrets.BOT_SELF_APPROVE_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "Merging PR #${PR_NUMBER}"
          # Retry merge up to 3 times and log response for debugging
          m=0
          mcode=0
          until [ "$m" -ge 3 ]; do
            mresp=$(curl -s -w "\n%{http_code}" -H "Authorization: token $TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -X PUT "https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/merge" \
              -d '{"merge_method":"merge"}') || true
            mcode=$(echo "$mresp" | tail -n1)
            mbody=$(echo "$mresp" | sed '$d')
            echo "Merge HTTP code: ${mcode}"
            echo "Merge response body: ${mbody}"
            if [ "${mcode}" = "200" ] || [ "${mcode}" = "201" ]; then
              echo "Merge succeeded"
              break
            fi
            m=$((m+1))
            echo "Merge attempt ${m} failed (code ${mcode}). Retrying in 2s..."
            sleep 2
          done
          if [ "$m" -ge 3 ] && [ "${mcode}" != "200" ] && [ "${mcode}" != "201" ]; then
            echo "Failed to merge PR after retries (last http code ${mcode})" >&2
            exit 1
          fi
