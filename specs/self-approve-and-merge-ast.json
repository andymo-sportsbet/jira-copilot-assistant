{
  "name": "Self-approve and (optionally) merge",
  "true": {
    "pull_request_target": {
      "types": [
        "opened",
        "reopened",
        "synchronize"
      ]
    },
    "workflow_dispatch": {}
  },
  "jobs": {
    "self-approve": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Validate PR author is repository owner",
          "id": "validate",
          "run": "# Only the pull_request_target path triggers this workflow. Auto-approve\n# only when the PR author is the repository owner. Do not auto-merge.\nPR_AUTHOR=\"${{ github.event.pull_request.user.login }}\"\nREPO_OWNER=\"${{ github.repository_owner }}\"\necho \"Triggered by event: ${{ github.event_name }}; PR author: $PR_AUTHOR; repo owner: $REPO_OWNER\"\nif [ \"$PR_AUTHOR\" != \"$REPO_OWNER\" ]; then\n  echo \"PR author is not the repository owner; skipping auto-approve.\" >&2\n  exit 78\nfi\n# Auto-approve on PR open/update and auto-merge for repo owner PRs\necho \"merge=yes\" >> $GITHUB_OUTPUT\n"
        },
        {
          "name": "Approve PR via API (as bot)",
          "if": "always()",
          "env": {
            "TOKEN": "${{ secrets.BOT_SELF_APPROVE_TOKEN }}",
            "OWNER": "${{ github.repository_owner }}",
            "REPO": "${{ github.event.repository.name }}",
            "PR_NUMBER": "${{ github.event.pull_request.number }}"
          },
          "run": "if [ -z \"$TOKEN\" ]; then\n  echo \"SELF_APPROVE_TOKEN secret not set\" >&2\n  exit 1\nfi\necho \"Posting approval for PR #${PR_NUMBER} as ${OWNER}\"\n# Retry up to 3 times if the API call fails; log response body and HTTP code for debugging\nn=0\ncode=0\nuntil [ \"$n\" -ge 3 ]; do\n  resp=$(curl -s -w \"\\n%{http_code}\" -H \"Authorization: token $TOKEN\" \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -X POST \"https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/reviews\" \\\n    -d '{\"body\":\"Automated code-owner approval\",\"event\":\"APPROVE\"}') || true\n  code=$(echo \"$resp\" | tail -n1)\n  body=$(echo \"$resp\" | sed '$d')\n  echo \"HTTP code: ${code}\"\n  echo \"Response body: ${body}\"\n  if [ \"${code}\" = \"200\" ] || [ \"${code}\" = \"201\" ]; then\n    echo \"Approval posted successfully\"\n    break\n  fi\n  n=$((n+1))\n  echo \"Approval attempt ${n} failed (code ${code}). Retrying in 2s...\"\n  sleep 2\ndone\nif [ \"$n\" -ge 3 ] && [ \"${code}\" != \"200\" ] && [ \"${code}\" != \"201\" ]; then\n  echo \"Failed to post approval after retries (last http code ${code})\" >&2\n  exit 1\nfi\n"
        },
        {
          "name": "Merge PR via API (optional)",
          "if": "${{ steps.validate.outputs.merge == 'yes' }}",
          "env": {
            "TOKEN": "${{ secrets.BOT_SELF_APPROVE_TOKEN }}",
            "OWNER": "${{ github.repository_owner }}",
            "REPO": "${{ github.event.repository.name }}",
            "PR_NUMBER": "${{ github.event.pull_request.number }}"
          },
          "run": "echo \"Merging PR #${PR_NUMBER}\"\n# Retry merge up to 3 times and log response for debugging\nm=0\nmcode=0\nuntil [ \"$m\" -ge 3 ]; do\n  mresp=$(curl -s -w \"\\n%{http_code}\" -H \"Authorization: token $TOKEN\" \\\n    -H \"Accept: application/vnd.github+json\" \\\n    -X PUT \"https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PR_NUMBER}/merge\" \\\n    -d '{\"merge_method\":\"merge\"}') || true\n  mcode=$(echo \"$mresp\" | tail -n1)\n  mbody=$(echo \"$mresp\" | sed '$d')\n  echo \"Merge HTTP code: ${mcode}\"\n  echo \"Merge response body: ${mbody}\"\n  if [ \"${mcode}\" = \"200\" ] || [ \"${mcode}\" = \"201\" ]; then\n    echo \"Merge succeeded\"\n    break\n  fi\n  m=$((m+1))\n  echo \"Merge attempt ${m} failed (code ${mcode}). Retrying in 2s...\"\n  sleep 2\ndone\nif [ \"$m\" -ge 3 ] && [ \"${mcode}\" != \"200\" ] && [ \"${mcode}\" != \"201\" ]; then\n  echo \"Failed to merge PR after retries (last http code ${mcode})\" >&2\n  exit 1\nfi\n"
        }
      ]
    }
  }
}